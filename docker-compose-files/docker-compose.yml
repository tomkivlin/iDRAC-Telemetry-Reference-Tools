version: "3.9"

######
# core services: activemq, mysqldb, configui, dbdiscauth, redfishread
#
# The core services are started for every profile. Additionally specify the
# profile for any backend databases, or start up a test database with the
# following profiles:
#    - influx-test-db  -->  also starts:
#       - influx-pump
#       - grafana
#    - prometheus-test-db  --> also starts:
#       - prometheus-pump
#       - grafana
#    - influx-pump
#    - prometheus-pump
#    - splunk-pump
#    - elk-pump (currently broken?)
#    - grafana
######

x-env-mysql: &mysql-env
  MYSQL_DATABASE: "telemetrysource_services_db"
  MYSQL_USER: "reftools"
  MYSQL_PASSWORD:
  MYSQL_HOST: "mysqldb"
  # MYSQL_HOST: "192.168.243.160"
  MYSQL_HOST_PORT: "3306"

x-env-messagebus: &messagebus-env
  MESSAGEBUS_HOST: activemq
  # MESSAGEBUS_HOST: 192.168.243.160
  MESSAGEBUS_PORT: 61613

x-env-prometheus: &prometheus-env
  PROMETHEUS_DB: poweredge_telemetry_metrics
  PROMETHEUS_URL: http://prometheus:9090
  # PROMETHEUS_URL: http://192.168.243.160:9090

x-env-prometheus-setup: &prometheus-setup-env
  node.name: prometheus
  DOCKER_PROMETHEUS_INIT_ADMIN_TOKEN:
  DOCKER_PROMETHEUS_INIT_PASSWORD:

x-env-grafana: &grafana-env
  GRAFANA_URL: http://grafana:3000
  # GRAFANA_URL: http://192.168.243.160:3000

x-arg-base: &base-args
  # USER_ID: ${USER_ID:-0}
  # GROUP_ID: ${GROUP_ID:-0}
  USER_ID: 1000
  GROUP_ID: 1000
  USERNAME: telemetry
  GROUPNAME: telemetry

x-build-base: &base-build
    context: .
    dockerfile: Dockerfile
    args:
      <<: *base-args

x-refdaemon: &refdaemon
  user: telemetry:telemetry
  build:
    <<: *base-build
  profiles:
    - core
  environment:
    <<: *messagebus-env
  depends_on:
    - mysqldb
    - activemq
  networks:
    - host-bridge-net

networks:
  host-bridge-net:
    driver: bridge

volumes:
  influxdb-storage:
  grafana-storage:
  prometheus-data:
  mysqldb-volume:
  dashboards:

services:
  # dataserv:
  #   container_name: dataserv
  #   build: ./dataserv
  #   volumes: 
  #       - ./dataserv:/csv:z
  #   profiles:
  #     - core
  #   networks:
  #     - host-bridge-net
  #   ports:
  #     - "5000:5000"

  activemq:
    container_name: activemq
    image: rmohr/activemq:latest
    profiles:
      - core
    networks:
      - host-bridge-net
    ports:
      - "8161:8161"

  mysqldb:
    container_name: mysqldb
    image: mysql:latest
    profiles:
      - core
    restart: always
    environment:
      <<: *mysql-env
      MYSQL_ROOT_PASSWORD:
    networks:
      - host-bridge-net
    volumes:
      - mysqldb-volume:/var/lib/mysql:rw

  configui:
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/configui:latest
    build:
      <<: *base-build
      dockerfile: Dockerfile.configui
      args:
        <<: *base-args
        CMD: configui
    environment:
      <<: *mysql-env
      <<: *messagebus-env
      CONFIGUI_HTTP_PORT: 8082       #sample reference - specify web application port
    ports:
      - "8080:8082"
    networks:
      - host-bridge-net


  dbdiscauth:
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/dbdiscauth:latest
    environment:
      <<: *messagebus-env
      <<: *mysql-env
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: dbdiscauth
    networks:
      - host-bridge-net


  redfishread:
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/redfishread:latest
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: redfishread
    networks:
      - host-bridge-net


  grafana:
    ############################################################################
    # GRAFANA - graphical dashboard for timeseries
    #    This is automatically started with the influx-test-db
    #    Manually start this if you want to point a grafana dashboard at an
    #      external server
    #
    # Add this to your docker-compose cli args:
    #   --profile grafana
    #
    # If you want to connect to an external influx database, set the following
    # environment variables:
    #
    #  INFLUXDB_DB: <name-of-influx-database>
    #  INFLUXDB_URL: http://influxdb:8086
    #
    ############################################################################

    # grafana runs as root in latest version. *sigh*
    # Polystat plugin install doesnt work with prior versions of Grafana. Grafana 9.0.1 is just released on 2022-06-21
    container_name: telemetry-reference-tools-grafana
    image: grafana/grafana:9.0.1
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./:/var/lib/grafana/grafana-polystat-panel
      - ./grafana-provisioning/:/etc/grafana/provisioning
    profiles:
      - grafana
      - setup-prometheus-test-db
      - prometheus-test-db
    environment:
      <<: *prometheus-env
      <<: *grafana-env
      GF_INSTALL_PLUGINS: grafana-polystat-panel
    ports:
      - "3000:3000"
    networks:
      - host-bridge-net

  prometheus:
    ############################################################################
    # PROMETHEUS - test prometheus database
    #    This is automatically started with the prometheus-test-db
    #
    # Add this to your docker-compose cli args:
    #   --profile prometheus-test-db
    #
    # If you want to connect to an external prometheus database,
    # set the following environment variables:
    #
    # TODO: add
    #
    ############################################################################
    image: prom/prometheus:v2.36.0
    restart: always
    container_name: prometheus
    profiles:
      - prometheus-test-db
      - setup-prometheus-test-db
    volumes:
      - type: bind
        source: ${PWD}/cmd/prometheuspump/prometheus.yml
        target: /config/prometheus.yml
        read_only: true
      - prometheus-data:/prometheus
    environment:
      <<: *prometheus-setup-env
      node.name: prometheus
      PROMETHEUS_DB: poweredge_telemetry_metrics
    command:
      - '--config.file=/config/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"  
    networks:
      - host-bridge-net


  prometheus-pump-standalone: &prometheus-pump
    ############################################################################
    # PROMETHEUS PUMP - data pump to pump telemetry into prometheus
    #    This is automatically started with the prometheus-test-db
    #    Manually start this profile if you want to point to an external server
    #
    # Add this to your docker-compose cli args:
    #   --profile prometheus-pump
    #
    # If you want to connect to an external prometheus database,
    # set the following environment variables:
    #
    #  PROMETHEUSDB_SERVER: prometheus-hostname
    #
    ############################################################################
    <<: *refdaemon
    container_name: prometheus-ingester
    image: idrac-telemetry-reference-tools/prometheuspump:latest
    profiles:
      - prometheus-pump
      - prometheus-test-db
    depends_on:
      - prometheus
      # - activemq
    environment:
      <<: *messagebus-env
      PROMETHEUSDB_SERVER: prometheus
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: prometheuspump
    ports:
      - "2112:2112"
    networks:
      - host-bridge-net

  # prometheus-pump-withtestserver:
  #   <<: *prometheus-pump
  #   container_name: prometheus-ingester
  #   depends_on:
  #     - prometheus
  #     - activemq
  #   profiles:
  #     - prometheus-test-db

  setup-prometheus-pump:
    build:
      <<: *base-build
      dockerfile: Dockerfile.setup
    image: idrac-telemetry-reference-tools/setupprometheus:latest
    profiles:
      - setup-prometheus-test-db
    depends_on:
      - prometheus
      - activemq
    restart: "no"
    environment:
      <<: *prometheus-env
      <<: *prometheus-setup-env
    networks:
      - host-bridge-net
    command: []
